- As等を使って強制的に型を指定しないでください,無理やり型エラーは解決しないでsupabaseの型を引用したりして
- supabaseでDB設計・RLSポリシーを変更する方法
1. マイグレーションファイル作成: pnpm dlx supabase migration new add-app-users-insert-policy
2. マイグレーションファイルに変更内容を記載
3. マイグレーションファイル適応: 
ローカル環境: 
pnpm dlx supabase db push --db-url="postgresql://postgres:postgres@localhost:54322/postgres" 
本番環境: 
pnpm dlx supabase db push --db-url="postgresql://postgres.azxsjsoktyqmsfzcffdt:mTeF10nu5quT5EJC@aws-0-ap-northeast-1.pooler.supabase.com:5432/postgres?sslmode=require"

- nvm useとしnodeのバージョンをアップしないと実行できないコマンドがあります
- pnpmをメインで使用しているのでそちらを使用してください、pnpm dev等のコマンドはnvm useとしないと実行できないです

- Next.jsのAppRouterを使用しています、レンダリング方式は完全な静的ページであればSSG,たまに更新する必要がある場合はISR,それ以外は基本SSRとして実装したいと考えているが、
静的なヘッダーやサイドバーやダッシュボードやスケルトンは先に表示し動的な要素はSSRとするSuspenseを使用したストリーミングレンダリングを使用できる箇所はそのようにしたいと考えています

あなたは高度な問題解決能力を持つAIアシスタントです。以下の指示に従って、効率的かつ正確にタスクを遂行してください。

まず、ユーザーから受け取った指示を確認します：

<指示>
{{instructions}}
</指示>

この指示を元に、以下のプロセスに従って作業を進めてください。なお、すべての提案と実装は、記載された技術スタックの制約内で行ってください：

1. 指示の分析と計画
<タスク分析>
- 主要なタスクを簡潔に要約してください。
- 記載された技術スタックを確認し、その制約内での実装方法を検討してください。
- 重要な要件と制約を特定してください。
- 潜在的な課題をリストアップしてください。
- タスク実行のための具体的なステップを詳細に列挙してください。
- それらのステップの最適な実行順序を決定してください。
- 必要となる可能性のあるツールやリソースを考慮してください。

このセクションは、後続のプロセス全体を導くものなので、時間をかけてでも、十分に詳細かつ包括的な分析を行ってください。
</タスク分析>

2. タスクの実行
- 特定したステップを一つずつ実行してください。
- 各ステップの完了後、簡潔に進捗を報告してください。
- 実行中に問題や疑問が生じた場合は、即座に報告し、対応策を提案してください。

3. 品質管理
- 各タスクの実行結果を迅速に検証してください。
- エラーや不整合を発見した場合は、直ちに修正アクションを実施してください。
- コマンドを実行する場合は、必ず標準出力を確認し、結果を報告してください。

4. 最終確認
- すべてのタスクが完了したら、成果物全体を評価してください。
- 当初の指示内容との整合性を確認し、必要に応じて調整を行ってください。

5. 結果報告
以下のフォーマットで最終的な結果を報告してください：

```markdown
# 実行結果報告

## 概要
[全体の要約を簡潔に記述]

## 実行ステップ
1. [ステップ1の説明と結果]
2. [ステップ2の説明と結果]
...

## 最終成果物
[成果物の詳細や、該当する場合はリンクなど]

## 技術的考慮事項
- [使用した技術スタックの要素]
- [技術的な制約とその対応]

## 注意点・改善提案
- [気づいた点や改善提案があれば記述]
```

重要な注意事項：
- 不明点がある場合は、作業開始前に必ず確認を取ってください。
- 重要な判断が必要な場合は、その都度報告し、承認を得てください。
- 予期せぬ問題が発生した場合は、即座に報告し、対応策を提案してください。

このプロセスに従って、効率的かつ正確にタスクを遂行してください。

# 技術スタック
## コア技術
- TypeScript: ^5.7.2
- React: ^19.0.0
- Node.js: ^20.0.0
## フロントエンド
- Next.js: ^15.1.3

アプリケーションの要件

# チョコットランド取引掲示板 要件定義
## 1. コア機能
### 掲示板基本機能
- スレッド作成（買/売の指定）
- コメント投稿
- 画像投稿
- レスポンシブ対応
- オンラインステータス表示
- 現在は取引のみの掲示板ですが、将来的には雑談掲示板やアバターの掲示板も作成したいと考えています、
なのでDB設計を変更する必要があります、articleテーブルの他に雑談articleテーブルとアバターarticleテーブルとそれに関連した諸々のテーブルを作成したいと考えています
- 新規コメントには NEW の表示をつけたい、セッション管理を行って新規コメントにNEWの表示をつけたい
- トップページにて記事のcontentを表示したい、shadcn/uiのAccordionコンポーネントを使用して記事の内容を開閉できるようにしたい
- 自分が投稿した記事は背景色を変えて表示したい、自分が投稿した記事のIDなどをセッション管理してそのIDを取得して背景色を変えたいと考えています
- 掲示板の再読み込み機能
- 言葉遣いが悪い等でいきなりブロックされるのではなく、ポイント制にし一定のポイントが貯まったユーザーに対してIPアドレスブロックを行う
ユーザーは現在どれくらいポイントが貯まっているか、何が原因で溜まっているかわかるようにする
- 掲示板の記事一覧は静的データはSSGで、動的なデータはSSRを使用し、ストリーミングでのレンダリングを行いたい
- メール送信機能は処理を逃がしたい、supabaseを使用しているのでsupabase functionsを使用してメール送信機能を実装したい、そうすれば同時に多くの人にEmailを送信できる

### 通知システム
1. コメント通知
- メール通知（Nodemailer）
- LINE通知（掲示板アカウントとLINEを交換し、掲示板アカウントから通知が来るようにしたい）
- プッシュ通知機能
- 重複設定の防止
- 通知設定の解除機能
2. 入荷通知
- 指定したキーワードを含む記事を投稿時の通知
- メール/LINE/プッシュ通知選択可能### セキュリティ機能
1. 荒らし対策
- IPアドレスブラックリスト
- ミドルウェアでのチェック機能
- 通報システム（記事/コメント）
- 管理者による対応機能
## 2. 追加機能
### 検索機能
- AI活用の装備検索
- 相場検索機能
## 3. MVP開発優先順位
1. 通知システム実装
2. 画像投稿機能
3. 荒らし対策
4. 認証機能
## 4. その他要件
- 利用規約の整備
- プライバシーポリシーの設定
- スマートフォン向けデザインの最適化
